name: Generate Method Index

on:
  push:
    paths:
      - 'docs/methods/*.json'
  pull_request:
    paths:
      - 'docs/methods/*.json'
  workflow_dispatch:

jobs:
  generate-index:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Generate Methods Index
      run: |
        python - <<'EOF'
        import os, json, glob, datetime
        from pathlib import Path

        def clean_method_name(name):
            """Clean method name for display"""
            return name.replace('[METHOD]: ', '').strip()

        def format_description(desc):
            """Format description for index display"""
            if not desc or desc in ['_No response_', 'N/A', 'n/a']:
                return "Method description not available"
            # Truncate long descriptions
            if len(desc) > 150:
                return desc[:147] + "..."
            return desc

        # Get all JSON files in docs/methods/
        json_files = glob.glob('docs/methods/*.json')
        json_files = [f for f in json_files if not f.endswith('/.gitkeep')]
        
        methods = []
        
        # Parse each JSON file
        for json_file in json_files:
            try:
                with open(json_file, 'r') as f:
                    data = json.load(f)
                
                method_name = clean_method_name(data.get('name_of_the_method_content', data.get('service', 'Unknown Method')))
                description = format_description(data.get('method_description_content', ''))
                method_id = data.get('id', 'unknown')
                vendor = data.get('vendor_content', '')
                workflow_stage = data.get('vhp4safety_workflow_stage_content', '')
                
                methods.append({
                    'name': method_name,
                    'id': method_id,
                    'description': description,
                    'vendor': vendor,
                    'workflow_stage': workflow_stage,
                    'issue_number': data.get('issue_number', '')
                })
                
            except Exception as e:
                print(f"Error processing {json_file}: {e}")
        
        # Sort methods alphabetically by name
        methods.sort(key=lambda x: x['name'].lower())
        
        # Generate the index markdown
        index_path = 'docs/methods/index.md'
        with open(index_path, 'w') as f:
            f.write("""![VHP4Safety logo](../VHP-LOGO-100mm-RGB.png "The VHP4Safety Project is a Dutch NWO-funded research collaboration")

# VHP4Safety Methods Catalog

<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT. -->

This catalog contains experimental methods and protocols used in VHP4Safety research workflows. Each method entry includes vendor information, catalog numbers, and integration details with VHP4Safety regulatory questions and workflow stages.

[Request a new method](https://github.com/VHP4Safety/cloud/issues/new/choose) | [Browse all methods](https://github.com/VHP4Safety/cloud/tree/main/docs/methods)

""")
            
            if not methods:
                f.write("*No methods are currently available in the catalog.*\n\n")
            else:
                f.write(f"## Available Methods ({len(methods)})\n\n")
                
                # Group by workflow stage if available
                stages = {}
                no_stage = []
                
                for method in methods:
                    stage = method['workflow_stage']
                    if stage and stage != '_No response_':
                        if stage not in stages:
                            stages[stage] = []
                        stages[stage].append(method)
                    else:
                        no_stage.append(method)
                
                # Write methods grouped by stage
                for stage in sorted(stages.keys()):
                    f.write(f"### {stage} Methods\n\n")
                    for method in stages[stage]:
                        f.write(f"#### {method['name']}\n\n")
                        f.write(f"{method['description']}")
                        
                        if method['vendor']:
                            f.write(f" (Vendor: {method['vendor']})")
                        
                        f.write(f" [[more information](../methods/{method['id']}.md)]\n\n")
                
                # Write ungrouped methods
                if no_stage:
                    f.write("### Other Methods\n\n")
                    for method in no_stage:
                        f.write(f"#### {method['name']}\n\n")
                        f.write(f"{method['description']}")
                        
                        if method['vendor']:
                            f.write(f" (Vendor: {method['vendor']})")
                        
                        f.write(f" [[more information](../methods/{method['id']}.md)]\n\n")
            
            # Add footer
            f.write("""---

## Contributing

Methods are automatically added to this catalog when new method JSON files are created from GitHub issues labeled with 'method'. To contribute:

1. [Create a new method request issue](https://github.com/VHP4Safety/cloud/issues/new/choose)
2. Fill out the method template with details about vendor, catalog number, and workflow integration
3. Label the issue with 'method'
4. The method will be automatically processed and added to this catalog

## About VHP4Safety

VHP4Safety â€“ the Virtual Human Platform for safety assessment project [NWA 1292.19.272](https://www.nwo.nl/projecten/nwa129219272) is part of the NWA research program 'Research along Routes by Consortia (ORC)', which is funded by the Netherlands Organization for Scientific Research (NWO). The project started on June 1, 2021 with a budget of over 10 million Euros and will last for the duration of 5 years.

*Index last updated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}*
""")
        
        print(f"Generated methods index: {index_path}")
        print(f"Total methods processed: {len(methods)}")
        EOF

    - name: Commit generated index
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        if [ -n "$(git status --porcelain docs/methods/index.md 2>/dev/null)" ]; then
          git add docs/methods/index.md
          git commit -m "Auto-generate methods index"
          git push
        else
          echo "No changes to methods index"
        fi
